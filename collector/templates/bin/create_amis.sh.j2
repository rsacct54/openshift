#!/bin/bash

export AWS_ACCESS_KEY_ID=
export AWS_SECRET_ACCESS_KEY=
export AWS_DEFAULT_REGION=
export s3_bucket=

# Unpack artifacts
tar -xv -C /root -f /root/ArtifactsBundle.tar.xz && rm -rf ArtifactsBundle.tar.xz ArtifactsBundle.tar.xz.sha256

# Create S3 bucket for vmdk storage
aws s3api create-bucket --bucket $s3_bucket --create-bucket-configuration LocationConstraint=$AWS_DEFAULT_REGION

# Expand coreos files
unxz /root/platform/coreos/fedora-coreos-*-aws.x86_64.vmdk.xz
gunzip /root/platform/coreos/rhcos-*-aws.x86_64.vmdk.gz

# Store vmdk's in s3
aws s3 cp /root/platform/coreos/fedora-coreos-*-aws.x86_64.vmdk s3://$s3_bucket
aws s3 cp /root/platform/coreos/rhcos-*-aws.x86_64.vmdk s3://$s3_bucket

cd /root/platform/coreos

# create vmimport role if needed

cat <<EOF > trust-policy.json
{
   "Version":"2012-10-17",
   "Statement":[
      {
         "Sid":"",
         "Effect":"Allow",
         "Principal":{
            "Service":"vmie.amazonaws.com"
         },
         "Action":"sts:AssumeRole",
         "Condition":{
            "StringEquals":{
               "sts:ExternalId":"vmimport"
            }
         }
      }
   ]
}
EOF

aws iam create-role --role-name vmimport --assume-role-policy-document file://trust-policy.json

cat <<EOF > role-policy.json
{
   "Version":"2012-10-17",
   "Statement":[
      {
         "Effect":"Allow",
         "Action":[
            "s3:ListBucket",
            "s3:GetBucketLocation"
         ],
         "Resource":[
            "arn:aws:s3:::${s3_bucket}"
         ]
      },
      {
         "Effect":"Allow",
         "Action":[
            "s3:GetObject"
         ],
         "Resource":[
            "arn:aws:s3:::${s3_bucket}/*"
         ]
      },
      {
         "Effect":"Allow",
         "Action":[
            "ec2:ModifySnapshotAttribute",
            "ec2:CopySnapshot",
            "ec2:RegisterImage",
            "ec2:Describe*"
         ],
         "Resource":"*"
      }
   ]
}
EOF

aws iam put-role-policy --role-name vmimport --policy-name vmimport --policy-document file://role-policy.json

EXT=vmdk
for i in /root/platform/coreos/*.${EXT}; do
    echo "$i"
    filename="$(basename ${i})"
    echo $filename
    cat <<EOF > ${filename}-containers.json
{
   "Description": "${filename}",
   "Format": "VMDK",
   "UserBucket": {
      "S3Bucket": "$s3_bucket",
      "S3Key": "${filename}"
   }
}
EOF
    IMPORT_ID=$(aws ec2 import-snapshot \
    	--description "${filename}" \
    	--disk-container "file://${filename}-containers.json" \
    	--output text --query 'ImportTaskId')
    echo $IMPORT_ID
    
    echo "Import ID: ${IMPORT_ID}"

    echo "Use the following command to monitor the import process:"
    echo "aws ec2 describe-import-snapshot-tasks --import-task-ids ${IMPORT_ID}"

    echo "Waiting until the import completes"

    STATUS="unknown"
    until [[ ${STATUS} == deleted || ${STATUS} == completed ]]
    do
        STATUS=$(aws ec2 describe-import-snapshot-tasks --import-task-ids ${IMPORT_ID} --output text --query 'ImportSnapshotTasks[*].SnapshotTaskDetail.Status')
        echo "Status: ${STATUS}"
        sleep 30
    done
    
    filename_no_ext="${filename%.*}"
    echo "Registering the image ${filename_no_ext}"
    # Get the snapshot ID from the import task
    SNAPSHOT_ID=$(aws ec2 describe-import-snapshot-tasks --import-task-ids \
                      ${IMPORT_ID} --output text --query 'ImportSnapshotTasks[*].SnapshotTaskDetail.SnapshotId')

   
    # Register the image
    aws ec2 register-image \
        --name "${filename_no_ext}" \
        --block-device-mappings \
    "[{\"DeviceName\": \"/dev/xvda\",\"Ebs\":{\"VolumeSize\":16,\"VolumeType\":\"gp2\",\"DeleteOnTermination\":true,\"SnapshotId\":\"${SNAPSHOT_ID}\"}}]" \
        --root-device-name '/dev/xvda' \
        --architecture x86_64 \
        --description "${filename_no_ext}" \
        --virtualization-type hvm \
        --ena-support

done

cd -
